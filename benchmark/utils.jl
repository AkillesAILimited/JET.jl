import Base.Meta: isexpr
using Statistics

"""
    stats = @freshexec [setup_ex = JET_SETUP_SCRIPT] ex

Runs `ex` in an external process and collects execution statistics from [`@timed`](@ref).
This is particularly useful for testing the performance of first-time analysis, where
  the native code cache and JET's global report cache have no effect for its performance.
`setup_ex` runs before each execution of `ex` and it's not included in the benchmark result;
  `setup_ex` defaults to `JET_SETUP_SCRIPT`, which loads JET and runs warm up analysis
  `@profile identity(nothing)`.
"""
macro freshexec(args...) freshexec(args...) end

freshexec(ex) = freshexec(JET_SETUP_SCRIPT, ex)
function freshexec(setup_ex, ex)
    # we need to flatten block expression to correctly execute e.g. macro expansion
    setup_exs = isexpr(setup_ex, :block) ? (filter(!islnn, setup_ex.args)...,) : (setup_ex,)
    exs = isexpr(ex, :block) ? (filter(!islnn, ex.args)...,) : (ex,)

    prog = """
    $(join(setup_exs, ';'))

    stats = @timed begin
        $(join(exs, ';'))
        nothing # ensure `stats` can be parsed
    end
    println(repr(stats))
    """

    cmd = Cmd([JULIA_BIN, "-e", prog])
    io = IOBuffer()
    run(pipeline(cmd; stdout = io))

    return Core.eval(@__MODULE__, Meta.parse(String(take!(io))))
end

islnn(@nospecialize(_)) = false
islnn(::LineNumberNode) = true

const JET_SETUP_SCRIPT = """
using JET

@profile_call identity(nothing) # warm-up for JET
"""
const JULIA_BIN = normpath(Sys.BINDIR, "julia")

"""
    @nfreshexec [ntimes = 5] [setup_ex = JET_SETUP_SCRIPT] ex

Runs `ex` in an external process multiple times (specified by `ntimes` optional argument),
  and collects execution statistics from [`@timed`](@ref). The statistics are generated by
  taking the mean of all the trials.
This is particularly useful for benchmarking the performance of first-time analysis, where
  the native code cache and JET's global report cache have no effect for its performance.
`setup_ex` runs before each execution of `ex` and it's not included in the benchmark result;
  `setup_ex` defaults to `JET_SETUP_SCRIPT`, which loads JET and runs warm up analysis
  `@profile identity(nothing)`.
"""
macro nfreshexec(args...)
    isn(x) = isexpr(x, :(=)) && first(x.args) === :ntimes
    i = findfirst(isn, args)
    n = isnothing(i) ? 5 : last(args[i].args)
    args = filter(!isn, args)
    return benchmark_freshexec(n, args...)
end

function benchmark_freshexec(n, args...)
    stats = [freshexec(args...) for _ in 1:n]
    return (; time   = mean(getproperty.(stats, :time)),
              bytes  = mean(getproperty.(stats, :bytes)),
              gctime = mean(getproperty.(stats, :gctime)),
              )
end
